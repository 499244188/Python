# -*- coding: utf-8 -*-
"""
Created on Tue Apr 11 16:01:40 2017

@author: Z
"""

import re
re.match(r'\d{3}\-\d{3,8}$','215-4568')

test='正则表达sh'
if re.match(r'正则表达',test):
    print('OK')
else:
    print('fa')

st='a b   c'
st1 = 'a , b   c,,d;;;e;f;f  fd;l'
st.split(' ')

#匹配分割
re.split(r'\s+',st)
re.split(r'[\s\,\;]+',st1)

#分组
st = '234-3424'
m = re.match(r'^(\d{3})-(\d{3,8})$',st)
m.groups()
m.group(0)
m.group(1)
m.group(2)

re.match(r'^(\d+)(0*)$', '102300').groups()
#非贪婪匹配
re.match(r'^(\d+?)(0*)$', '1000002300000').groups()#*在前面出现0次或多次
re.match(r'^(\d+?)(2{2})$', '1000002300000222222222').groups()


#编译
re_telephone = re.compile(r'(\d{3})-(\d{3,8})$')
re_telephone.match('123-23243').groups()

re_mail = re.compile(r'(^([a-zA-z0-9_.]+)@([a-zA-z0-9_]+).([a-zA-z0-9_]{2,5}))')

re_mail.match('bill.gates@microsoft.com').groups()








'''
创建一个匹配Email的正则表达式；

用该正则表达式去匹配用户的输入来判断是否合法。

因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。

在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字，所以：

'00\d'可以匹配'007'，但无法匹配'00A'；

'\d\d\d'可以匹配'010'；

'\w\w\d'可以匹配'py3'；

.可以匹配任意字符，所以：

'py.'可以匹配'pyc'、'pyo'、'py!'等等。
要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符：

来看一个复杂的例子：\d{3}\s+\d{3,8}。

我们来从左到右解读一下：

\d{3}表示匹配3个数字，例如'010'；

\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；

\d{3,8}表示3-8个数字，例如'1234567'。

综合起来，上面的正则表达式可以匹配以任意个空格隔开的带区号的电话号码。

如果要匹配'010-12345'这样的号码呢？由于'-'是特殊字符，在正则表达式中，要用'\'转义，所以，上面的正则是\d{3}\-\d{3,8}。

但是，仍然无法匹配'010 - 12345'，因为带有空格。所以我们需要更复杂的匹配方式。

进阶

要做更精确地匹配，可以用[]表示范围，比如：

[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；

[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；

[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；

[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。

A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。

^表示行的开头，^\d表示必须以数字开头。

$表示行的结束，\d$表示必须以数字结束。

你可能注意到了，py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。
'''